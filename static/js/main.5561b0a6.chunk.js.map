{"version":3,"sources":["Text.js","components/ToggleDarkMode.js","components/TextNavigation.js","App.js","reportWebVitals.js","fonts/OpenDyslexic3-Regular.ttf","components/Header.js","components/Footer.js","index.js"],"names":["LanguageMap","FrenchText","EnglishText","ToggleDarkMode","id","onClick","e","target","classList","contains","document","documentElement","setAttribute","remove","add","TextNavigation","props","currentLevel1","markers","text","filter","entry","marker","href","map","additionalAction","event","srcElement","revealingClassName","previousSubLevels","parentElement","getElementsByClassName","subLevelClassName","split","className","lang","App","lastCharacter","combinedText","key","combinedCharacters","charId","name","Object","hasOwnProperty","call","mismatchWarningRaised","forEach","line","idx","length","englishLine","character","direction","console","warn","translatedLine","push","Text","useState","altLang","state","setState","toggleLineLanguage","targetElement","localName","requestedElement","characters","charactersToSelect","getCharacterName","title","author","display","multiple","onChange","selected","selectedOptions","selectedCharacters","value","style","whiteSpace","t","displayText","altDisplayText","sameCharacter","highlighted","indexOf","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Header","Footer","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5561b0a6.chunk.js","sourcesContent":["import FrenchText from './assets/texts/phedre/fr.json'\nimport EnglishText from './assets/texts/phedre/en.json'\n\nconst LanguageMap = {\n  \"fr\": {\n    \"display\": \"franÃ§ais\",\n    \"text\": FrenchText\n  },\n  \"en\": {\n    \"display\": \"english\",\n    \"text\": EnglishText\n  }\n};\n\n// will parse md files\n// to produce a master JSON object\n// which, for each line, is a dict of ISO language keys and their version of the line, translating at the last moment\nfunction Text() {\n  let combinedText = {};\n  for (const key in FrenchText) {\n    if (key === 'characters') {\n      // TODO: warn if keys are mismatched between translations\n      let combinedCharacters = {};\n      for (const charId in FrenchText[key]) {\n        combinedCharacters[charId] = {\n          name: {\n            'fr': FrenchText[key][charId].name,\n            'en': EnglishText[key][charId].name\n          }\n        }\n      }\n      combinedText[key] = combinedCharacters;\n    } else if (key !== 'text' && Object.hasOwnProperty.call(FrenchText, key)) {\n      const element = FrenchText[key];\n      combinedText[key] = {\n        'fr': FrenchText[key],\n        'en': EnglishText[key]\n      }\n    } else if(key === 'text') {\n      combinedText[key] = [];\n      let mismatchWarningRaised = false;\n      FrenchText[key].forEach((line, idx) => {\n        if(idx > EnglishText.text.length - 1) {\n          // texts aren't aligned, indicating a fault in the translation. Debug using warnings in the console.\n          return;\n        }\n        const englishLine = EnglishText.text[idx];\n        if(!mismatchWarningRaised && (line.character !== englishLine.character || line.direction !== englishLine.direction || line.marker !== englishLine.marker)) {\n          console.warn(\"Texts are out of sync from the following line pair: \", line, englishLine);\n          mismatchWarningRaised = true;\n        }\n        let translatedLine = {\n          'character': line.character,\n          'direction': line.direction,\n          'marker': line.marker,\n          'id': line.marker ? idx : false,\n          'text': {\n            'fr': line.text,\n            'en': englishLine.text\n          }\n        };\n        combinedText[key].push(translatedLine);\n      });\n    }\n  }\n  return combinedText;\n}\n\nexport {LanguageMap, Text};","import React from \"react\";\nimport './ToggleDarkMode.css';\n\nfunction ToggleDarkMode() {\n  function switchTheme(e) {\n    if (!e.target.classList.contains(\"active\")) {\n      document.documentElement.setAttribute('data-theme', 'dark');\n      e.target.classList.add(\"active\");\n    } else {\n      document.documentElement.setAttribute('data-theme', 'light');\n      e.target.classList.remove(\"active\");\n    }\n  }\n  return <div id=\"dark-mode-toggle\">\n    <button id=\"dark-mode-button\" onClick={switchTheme}/>\n  </div>;\n}\n\nexport default ToggleDarkMode;","import React from \"react\";\nimport './TextNavigation.css';\nimport ToggleDarkMode from './ToggleDarkMode'\n\nfunction TextNavigation(props) {\n  const text = props.text;\n  const markers = text.text.filter((entry) => entry.marker);\n\n  function showSubLevels(key) {\n    return (event) => {\n      const target = event.target || event.srcElement;\n      const revealingClassName = \"sub-reveal\";\n      const previousSubLevels = target.parentElement.getElementsByClassName(revealingClassName);\n      for(const element of previousSubLevels) {\n        element.classList.remove(revealingClassName);\n      }\n      const subLevelClassName = \"sub-\" + target.href.split('#')[1];\n      for(const element of target.parentElement.getElementsByClassName(subLevelClassName)) {\n        element.classList.add(revealingClassName);\n      }\n    }\n  };\n\n  // TODO: add \"jump to next highlighted line\" button\n  let currentLevel1;\n  return <div id=\"TextNavigation\">\n    <a href=\"#root\">\n      Top\n    </a>\n    {\n      markers.map((marker) => {\n        currentLevel1 = (marker.marker === 1) ? marker.id : currentLevel1;\n        const additionalAction = (marker.marker === 1) ? showSubLevels(marker.id) : null;\n        let className = \"marker-anchor-\"+marker.marker;\n        className += (marker.marker === 2) ? \" sub-\"+currentLevel1 : \"\";\n        return (\n          <a href={\"#\"+marker.id} key={marker.id} className={className} onClick={additionalAction}>\n            {marker.text[props.lang]}\n          </a>\n        );\n      })\n    }\n  </div>;\n}\n\nexport default TextNavigation;","import React, { useState } from 'react';\nimport './App.css';\nimport { LanguageMap, Text } from './Text.js';\nimport TextNavigation from './components/TextNavigation'\n\nfunction App() {\n  const text = Text();\n  const [state, setState] = useState({\n    lang: \"fr\",\n    altLang: \"en\"\n  });\n  let toggleLanguage = function () {\n    setState({\n      lang: state.altLang,\n      altLang: state.lang\n    });\n  };\n  // TODO: check if this way of managing elements is accessible\n  let toggleLineLanguage = function (key) {\n    return (event) => {\n      const target = event.target || event.srcElement;\n      const targetElement = target.localName === \"span\" ? target : (target.getElementsByClassName(state.lang)[0] || target.parentElement);\n      const container = targetElement.parentElement;\n      const requestedElement = container.getElementsByClassName(\"altLang\")[0];\n      targetElement.classList.add(\"altLang\");\n      requestedElement.classList.remove(\"altLang\");\n    };\n  };\n\n  const characters = text.characters;\n  let charactersToSelect = [];\n  for (const id in characters) {\n    charactersToSelect.push({\n      id: id,\n      name: characters[id].name[state.lang]\n    });\n  };\n  let lastCharacter;\n\n  function updateCharacterSelection (event) {\n    const target = event.target;\n    const selected = target.selectedOptions;\n    let selectedCharacters = [];\n    for (let idx = 0; idx < selected.length; idx++) {\n      selectedCharacters.push(selected[idx].value);\n    }\n    setState({\n      lang: state.lang,\n      altLang: state.altLang,\n      selectedCharacters: selectedCharacters\n    });\n  };\n\n  function getCharacterName(charId, lang) {\n    return characters[charId]?.name[lang] || charId;\n  }\n\n  return (\n    <div id=\"App\">\n      <TextNavigation lang={state.lang} text={text}/>\n      <div id=\"AppBody\">\n        <div id=\"TextHeader\">\n          <h1>{text.title[state.lang]}</h1>\n          <h2>{text.author[state.lang]}</h2>\n        </div>\n        <div id=\"Configuration\">\n          <button id=\"LanguageToggle\" onClick={toggleLanguage}>Change language to: {LanguageMap[state.altLang].display}</button>\n          <br/>\n          <select id=\"CharacterSelect\" multiple onChange={updateCharacterSelection}>\n            <option value=\"\">-- Select characters for line highlighting --</option>\n            {charactersToSelect.map((character) => {\n              // TODO: add option for highlighting directions too for narrators\n              return (\n                <option value={character.id} key={character.id}>{character.name}</option>\n              );\n            })}\n          </select>\n        </div>\n        <div id=\"TextBody\" style={{ whiteSpace: \"pre-wrap\" }}>\n          {text.text.map((t, key) => {\n            const displayText = t.text[state.lang];\n            const altDisplayText = t.text[state.altLang];\n            // TODO: make these items keyboard accessible, maybe by wrapping them in buttons or links\n            if (t.marker) {\n              lastCharacter = null;\n              return (\n                <h3 className=\"marker\" id={t.id} key={key} onClick={toggleLineLanguage(key)}>\n                  <span className={state.lang}>{displayText}</span>\n                  <span className={`${state.altLang} altLang`}>{altDisplayText}</span>\n                </h3>\n              );\n            } else if (t.direction) {\n              return (\n                <p className=\"direction\" key={key} onClick={toggleLineLanguage(key)}>\n                  <span className={state.lang}><i>{displayText}</i></span>\n                  <span className={`${state.altLang} altLang`}><i>{altDisplayText}</i></span>\n                </p>\n              );\n            } else {\n              const sameCharacter = lastCharacter === t.character;\n              lastCharacter = t.character;\n              const highlighted = (state.selectedCharacters || []).indexOf(t.character) > -1;\n              return (\n                <p key={key} className={`speech ${t.character} ${highlighted ? \"highlighted\" : \"\"}`} onClick={toggleLineLanguage(key)}>\n                  <span className={state.lang}><b className={sameCharacter ? \"same-character\" : null}>{getCharacterName(t.character, state.lang)}: </b>{displayText}</span>\n                  <span className={`${state.altLang} altLang`}><b className={sameCharacter ? \"same-character\" : null}>{getCharacterName(t.character, state.altLang)}: </b>{altDisplayText}</span>\n                </p>\n              );\n            }\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export default __webpack_public_path__ + \"static/media/OpenDyslexic3-Regular.695571a7.ttf\";","import React from \"react\";\nimport \"./Header.css\";\nimport ToggleDarkMode from './ToggleDarkMode'\n\nfunction Header() {\n  return <header>\n    <ToggleDarkMode />\n  </header>;\n}\n\nexport default Header;","import React from \"react\";\nimport \"./Footer.css\";\n\n// TODO: include wikisource and gutenberg\nfunction Footer() {\n  return <footer>\n    <p>\n      Icons made by <a href=\"https://www.flaticon.com/authors/freepik\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a>\n    </p>\n  </footer>;\n}\n\nexport default Footer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './fonts/OpenDyslexic3-Regular.ttf';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Header />\n    <App />\n    <Footer />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}