[{"/Users/helen/Develop/script-reader/src/index.js":"1","/Users/helen/Develop/script-reader/src/App.js":"2","/Users/helen/Develop/script-reader/src/reportWebVitals.js":"3","/Users/helen/Develop/script-reader/src/Text.js":"4"},{"size":544,"mtime":1609026443349,"results":"5","hashOfConfig":"6"},{"size":3902,"mtime":1610661185585,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1608908368700,"results":"8","hashOfConfig":"6"},{"size":1421,"mtime":1610660644576,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"jz1l8u",{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"12"},"/Users/helen/Develop/script-reader/src/index.js",[],["20","21"],"/Users/helen/Develop/script-reader/src/App.js",["22"],"/Users/helen/Develop/script-reader/src/reportWebVitals.js",[],"/Users/helen/Develop/script-reader/src/Text.js",["23"],"import FrenchText from './assets/texts/phedre/fr.json'\n// import EnglishText from './assets/texts/incendies/en.json'\nconst EnglishText = FrenchText\n\nconst LanguageMap = {\n  \"fr\": {\n    \"display\": \"franÃ§ais\",\n    \"text\": FrenchText\n  },\n  \"en\": {\n    \"display\": \"english\",\n    \"text\": EnglishText\n  }\n};\n\n// will parse md files\n// to produce a master JSON object\n// which, for each line, is a dict of ISO language keys and their version of the line, translating at the last moment\nfunction Text() {\n  let combinedText = {};\n  for (const key in FrenchText) {\n    if (key !== 'text' && Object.hasOwnProperty.call(FrenchText, key)) {\n      const element = FrenchText[key];\n      combinedText[key] = {\n        'fr': FrenchText[key],\n        'en': EnglishText[key]\n      }\n    } else if(key === 'text') {\n      combinedText[key] = [];\n      FrenchText[key].forEach((line, idx) => {\n        if(idx > EnglishText.text.length - 1) {\n          // if this happens with real text should throw an error, texts aren't aligned\n          return;\n        }\n        let translatedLine = {\n          'character': line.character,\n          'direction': line.direction,\n          'marker': line.marker,\n          'text': {\n            'fr': line.text,\n            'en': EnglishText.text[idx].text\n          }\n        };\n        combinedText[key].push(translatedLine);\n      });\n    }\n  }\n  return combinedText;\n}\n\nexport {LanguageMap, Text};",{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","severity":1,"message":"29","line":2,"column":8,"nodeType":"30","messageId":"31","endLine":2,"endColumn":12},{"ruleId":"28","severity":1,"message":"32","line":23,"column":13,"nodeType":"30","messageId":"31","endLine":23,"endColumn":20},"no-native-reassign",["33"],"no-negated-in-lhs",["34"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'element' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]