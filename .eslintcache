[{"/Users/helen/Develop/script-reader/src/index.js":"1","/Users/helen/Develop/script-reader/src/App.js":"2","/Users/helen/Develop/script-reader/src/reportWebVitals.js":"3","/Users/helen/Develop/script-reader/src/Text.js":"4"},{"size":544,"mtime":1609026443349,"results":"5","hashOfConfig":"6"},{"size":3895,"mtime":1610744351908,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1608908368700,"results":"8","hashOfConfig":"6"},{"size":1384,"mtime":1610744243880,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"jz1l8u",{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"21"},"/Users/helen/Develop/script-reader/src/index.js",[],["22","23"],"/Users/helen/Develop/script-reader/src/App.js",["24"],"import React, {useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {LanguageMap, Text} from './Text.js';\n\nfunction App() {\n  const text = Text();\n  const [state, setState] = useState({\n    lang: \"fr\",\n    altLang: \"en\"\n  });\n  let toggleLanguage = function() {\n    setState({\n      lang: state.altLang,\n      altLang: state.lang\n    });\n  };\n  // TODO: check if this way of managing elements is accessible\n  let showAltLine = function(key) {\n    return (event) => {\n      // not convinced by the parent fallback\n      const target = event.target || event.srcElement;\n      const currentElement = target.localName === \"span\" ? target : (target.getElementsByClassName(state.lang)[0] || target.parentElement);\n      const pElement = currentElement.parentElement;\n      const altElement = pElement.getElementsByClassName(state.altLang)[0];\n      currentElement.style.display = \"none\";\n      altElement.style.display = \"\";\n    };\n  };\n  let resetLine = function(key) {\n    return (event) => {\n      const target = event.target || event.srcElement;\n      const altElement = target.localName === \"span\" ? target : (target.getElementsByClassName(state.altLang)[0] || target.parentElement);\n      const parent = altElement.parentElement;\n      const currentElement = parent.getElementsByClassName(state.lang)[0];\n      currentElement.style.display = \"\";\n      altElement.style.display = \"none\";\n    };\n  };\n\n  const characters = text.characters[state.lang];\n  const altCharacters = text.characters[state.altLang];\n  const selectedCharacter = \"S\"; // demo\n  let lastCharacter;\n\n  function getCharacterName(charId, useAlt) {\n    let hasMoreInfo = !!characters[charId];\n    if(hasMoreInfo) {\n      return useAlt ? altCharacters[charId].name : characters[charId].name;\n    } else {\n      return charId;\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"TextHeader\">\n        <h1>{text.title[state.lang]}</h1>\n        <h2>{text.author[state.lang]}</h2>\n      </div>\n      <div className=\"Configuration\">\n        <button onClick={toggleLanguage}>Change language to: {LanguageMap[state.altLang].display}</button>\n      </div>\n      <div className=\"TextBody\" style={{whiteSpace: \"pre-wrap\"}}>\n        {text.text.map((t, key) => {\n          const displayText = t.text[state.lang];\n          const altDisplayText = t.text[state.altLang];\n          if (t.marker) {\n            lastCharacter = null;\n            return (\n              <h3 key={key} onMouseDown={showAltLine(key)} onMouseUp={resetLine(key)}>\n                <span className={state.lang}>{displayText}</span>\n                <span className={state.altLang} style={{display:\"none\"}}>{altDisplayText}</span>\n              </h3>\n            );\n          } else if (t.direction) {\n            return (\n              <p key={key} onMouseDown={showAltLine(key)} onMouseUp={resetLine(key)}>\n                <span className={state.lang}><i>{displayText}</i></span>\n                <span className={state.altLang} style={{display:\"none\"}}><i>{altDisplayText}</i></span>\n              </p>\n            );\n          } else {\n            const sameCharacter = lastCharacter === t.character;\n            lastCharacter = t.character;\n            const highlighted = t.character === selectedCharacter;\n            return (\n              <p key={key} onMouseDown={showAltLine(key)} onMouseUp={resetLine(key)} className={highlighted ? \"highlighted\" : \"\"}>\n                <span className={state.lang}><b className={sameCharacter ? \"same-character\" : null}>{getCharacterName(t.character)}: </b>{displayText}</span>\n                <span className={state.altLang} style={{display:\"none\"}}><b className={sameCharacter ? \"same-character\" : null}>{getCharacterName(t.character, true)}: </b>{altDisplayText}</span>\n              </p>\n            );\n          }\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/helen/Develop/script-reader/src/reportWebVitals.js",[],"/Users/helen/Develop/script-reader/src/Text.js",["25"],"import FrenchText from './assets/texts/phedre/fr.json'\nimport EnglishText from './assets/texts/phedre/en.json'\n\nconst LanguageMap = {\n  \"fr\": {\n    \"display\": \"franÃ§ais\",\n    \"text\": FrenchText\n  },\n  \"en\": {\n    \"display\": \"english\",\n    \"text\": EnglishText\n  }\n};\n\n// will parse md files\n// to produce a master JSON object\n// which, for each line, is a dict of ISO language keys and their version of the line, translating at the last moment\nfunction Text() {\n  let combinedText = {};\n  for (const key in FrenchText) {\n    if (key !== 'text' && Object.hasOwnProperty.call(FrenchText, key)) {\n      const element = FrenchText[key];\n      combinedText[key] = {\n        'fr': FrenchText[key],\n        'en': EnglishText[key]\n      }\n    } else if(key === 'text') {\n      combinedText[key] = [];\n      FrenchText[key].forEach((line, idx) => {\n        if(idx > EnglishText.text.length - 1) {\n          // if this happens with real text should throw an error, texts aren't aligned\n          return;\n        }\n        let translatedLine = {\n          'character': line.character,\n          'direction': line.direction,\n          'marker': line.marker,\n          'text': {\n            'fr': line.text,\n            'en': EnglishText.text[idx].text\n          }\n        };\n        combinedText[key].push(translatedLine);\n      });\n    }\n  }\n  return combinedText;\n}\n\nexport {LanguageMap, Text};",["26","27"],{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":2,"column":8,"nodeType":"34","messageId":"35","endLine":2,"endColumn":12},{"ruleId":"32","severity":1,"message":"36","line":22,"column":13,"nodeType":"34","messageId":"35","endLine":22,"endColumn":20},{"ruleId":"28","replacedBy":"37"},{"ruleId":"30","replacedBy":"38"},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'element' is assigned a value but never used.",["39"],["40"],"no-global-assign","no-unsafe-negation"]